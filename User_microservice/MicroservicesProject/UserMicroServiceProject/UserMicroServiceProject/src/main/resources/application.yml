server:
  port: 8083

spring:
  application:
    name: user-service

  profiles:
    active: local

  datasource:
    url: jdbc:postgresql://localhost:5432/userdb
    username: postgres
    password: PostgreEmre4435
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: user-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.UserMicroServiceProject.domain.model.user

  cloud:
    openfeign:
      client:
        config:
          default:
            connectTimeout: 5000
            readTimeout: 5000
            loggerLevel: basic

# JWT Configuration
jwt:
  secret: 404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
  expiration: 86400000 # 24 hours
  refresh-expiration: 604800000 # 7 days

# External Services (other microservices)
external-services:
  cart-service:
    url: http://localhost:8082
  order-service:
    url: http://localhost:8081
  product-service:
    url: http://localhost:8080
  notification-service:
    url: http://localhost:8084

# Management (Health Check)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.ecommerce.userservice: INFO
    org.springframework.kafka: INFO
    org.springframework.security: DEBUG
    com.example.UserMicroServiceProject.infrastructure.client: DEBUG
    com.example.UserMicroServiceProject: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

---
# Docker Profile
spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:postgresql://postgres:5432/userdb
    username: postgres
    password: PostgreEmre4435

  kafka:
    bootstrap-servers: kafka:9092

# External Services (Docker container names)
external-services:
  cart-service:
    url: http://cart-service:8082
  order-service:
    url: http://order-service:8083
  product-service:
    url: http://product-service:8084
  notification-service:
    url: http://notification-service:8085

logging:
  level:
    com.ecommerce.userservice: INFO

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
    filter: true
  packages-to-scan: com.example.UserMicroServiceProject.presentation.web
  paths-to-match: /api/**